# ============================================================================
# DOCKERFILE PARA COMPILACIÓN JVM (Modo tradicional)
# ============================================================================
# Multi-stage build para optimizar el tamaño de la imagen final
# Etapa 1: Build - Compila la aplicación con Maven
# Etapa 2: Runtime - Ejecuta la aplicación en JRE minimal
# ============================================================================

# ----------------------------------------------------------------------------
# STAGE 1: BUILD
# ----------------------------------------------------------------------------
FROM maven:3.9.9-eclipse-temurin-21-alpine AS build

# Metadata
LABEL stage=builder
LABEL maintainer="pe.banco"

# Establecer directorio de trabajo
WORKDIR /app

# Copiar archivos de configuración Maven primero (para aprovechar cache)
COPY pom.xml .
COPY mvnw .
COPY .mvn .mvn

# Descargar dependencias (esta capa se cachea si pom.xml no cambia)
RUN mvn dependency:go-offline -B

# Copiar código fuente
COPY src ./src

# Compilar la aplicación (skip tests para compilación más rápida)
# El -Dquarkus.package.type=uber-jar crea un JAR ejecutable único
RUN mvn clean package -DskipTests -B \
    && echo "✅ Compilación JVM exitosa" \
    && ls -lh target/

# ----------------------------------------------------------------------------
# STAGE 2: RUNTIME
# ----------------------------------------------------------------------------
FROM eclipse-temurin:21-jre-alpine

# Metadata
LABEL maintainer="pe.banco"
LABEL version="1.0.0"
LABEL description="Microservicio de Pre-Aprobación Crediticia - Modo JVM"

# Variables de entorno
ENV LANGUAGE='es_PE.UTF-8' \
    LANG='es_PE.UTF-8' \
    LC_ALL='es_PE.UTF-8' \
    TZ='America/Lima'

# Instalar timezone data
RUN apk add --no-cache tzdata \
    && cp /usr/share/zoneinfo/America/Lima /etc/localtime \
    && echo "America/Lima" > /etc/timezone \
    && apk del tzdata

# Crear usuario no-root para mayor seguridad
RUN addgroup -g 1001 quarkus \
    && adduser -u 1001 -G quarkus -s /bin/sh -D quarkus

# Establecer directorio de trabajo
WORKDIR /deployments

# Copiar el JAR compilado desde la etapa de build
COPY --from=build --chown=quarkus:quarkus /app/target/quarkus-app/lib/ ./lib/
COPY --from=build --chown=quarkus:quarkus /app/target/quarkus-app/*.jar ./
COPY --from=build --chown=quarkus:quarkus /app/target/quarkus-app/app/ ./app/
COPY --from=build --chown=quarkus:quarkus /app/target/quarkus-app/quarkus/ ./quarkus/

# Cambiar a usuario no-root
USER quarkus

# Exponer puerto
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health/ready || exit 1

# Comando de inicio con configuraciones optimizadas
ENTRYPOINT ["java", \
    "-Dquarkus.http.host=0.0.0.0", \
    "-Djava.util.logging.manager=org.jboss.logmanager.LogManager", \
    "-jar", "quarkus-run.jar"]

# ============================================================================
# INSTRUCCIONES DE USO:
# ============================================================================
# Build:
#   docker build -f Dockerfile.jvm -t aprobacion-express:jvm .
#
# Run:
#   docker run -p 8080:8080 aprobacion-express:jvm
#
# Tamaño esperado: ~400MB
# Tiempo de arranque: ~2.5 segundos
# Memoria RSS: ~180MB
# ============================================================================
