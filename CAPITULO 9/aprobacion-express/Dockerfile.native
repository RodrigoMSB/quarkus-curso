# ============================================================================
# DOCKERFILE PARA COMPILACIÓN NATIVE (GraalVM)
# ============================================================================
# Multi-stage build para compilación nativa
# Etapa 1: Build - Compila con GraalVM native-image
# Etapa 2: Runtime - Ejecuta el binario nativo en imagen minimal
# ============================================================================

# ----------------------------------------------------------------------------
# STAGE 1: NATIVE BUILD
# ----------------------------------------------------------------------------
FROM quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21 AS build

# Metadata
LABEL stage=builder
LABEL maintainer="pe.banco"

# Establecer directorio de trabajo
WORKDIR /app

# Copiar archivos Maven
COPY --chown=quarkus:quarkus pom.xml .
COPY --chown=quarkus:quarkus mvnw .
COPY --chown=quarkus:quarkus .mvn .mvn

# Descargar dependencias (capa cacheada)
RUN ./mvnw dependency:go-offline -B

# Copiar código fuente y recursos
COPY --chown=quarkus:quarkus src ./src

# Compilar en modo NATIVO con GraalVM
# Este proceso toma varios minutos pero genera un binario optimizado
RUN ./mvnw package -Pnative -DskipTests -B \
    && echo "✅ Compilación NATIVE exitosa" \
    && ls -lh target/

# ----------------------------------------------------------------------------
# STAGE 2: RUNTIME MINIMAL
# ----------------------------------------------------------------------------
FROM registry.access.redhat.com/ubi9/ubi-minimal:9.5

# Metadata
LABEL maintainer="pe.banco"
LABEL version="1.0.0"
LABEL description="Microservicio de Pre-Aprobación Crediticia - Modo NATIVE"

# Variables de entorno
ENV LANGUAGE='es_PE.UTF-8' \
    LANG='es_PE.UTF-8' \
    LC_ALL='es_PE.UTF-8' \
    TZ='America/Lima'

# Instalar dependencias mínimas necesarias
RUN microdnf install -y tzdata \
    && microdnf clean all \
    && cp /usr/share/zoneinfo/America/Lima /etc/localtime \
    && echo "America/Lima" > /etc/timezone

# Crear usuario no-root
RUN useradd -r -u 1001 -g 0 quarkus

# Establecer directorio de trabajo
WORKDIR /work

# Copiar el binario nativo desde la etapa de build
COPY --from=build --chown=quarkus:root /app/target/*-runner /work/application

# Dar permisos de ejecución
RUN chmod 775 /work/application \
    && chown -R quarkus:root /work

# Cambiar a usuario no-root
USER quarkus

# Exponer puerto
EXPOSE 8080

# Health check optimizado para native (arranca más rápido)
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health/ready || exit 1

# Comando de inicio del binario nativo
ENTRYPOINT ["./application", "-Dquarkus.http.host=0.0.0.0"]

# ============================================================================
# INSTRUCCIONES DE USO:
# ============================================================================
# Build (toma 5-10 minutos):
#   docker build -f Dockerfile.native -t aprobacion-express:native .
#
# Run:
#   docker run -p 8080:8080 aprobacion-express:native
#
# Tamaño esperado: ~165MB (2.5x más pequeño que JVM)
# Tiempo de arranque: ~0.05 segundos (50x más rápido que JVM)
# Memoria RSS: ~35MB (5x menos que JVM)
# ============================================================================
