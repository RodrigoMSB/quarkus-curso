package pe.banco.tasacorp.resource;

import jakarta.inject.Inject;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import org.jboss.logging.Logger;
import pe.banco.tasacorp.model.ConversionResponse;
import pe.banco.tasacorp.model.TasaResponse;
import pe.banco.tasacorp.service.TasaService;

import java.util.Map;

/**
 * REST Resource para operaciones de tasas de cambio.
 * 
 * üìã PROP√ìSITO:
 * Este es el controlador REST (capa de presentaci√≥n) que expone
 * los endpoints HTTP para que clientes externos consulten tasas
 * y realicen conversiones de moneda.
 * 
 * üèóÔ∏è ARQUITECTURA - CAPA DE PRESENTACI√ìN:
 * 
 * Esta clase es la ENTRADA a la aplicaci√≥n:
 * 
 * Cliente HTTP (Postman, cURL, browser, app m√≥vil)
 *     ‚Üì  HTTP Request
 * TasaResource (REST) ‚Üê Estamos aqu√≠
 *     ‚Üì  Java method call
 * TasaService (L√≥gica de negocio)
 *     ‚Üì  Config access
 * TasaCorpConfig (Configuraci√≥n)
 *     ‚Üì  JSON serialization
 * DTOs (ConversionResponse / TasaResponse)
 *     ‚Üì  HTTP Response
 * Cliente recibe JSON
 * 
 * üí° JAX-RS (Jakarta RESTful Web Services):
 * 
 * Quarkus usa JAX-RS para crear APIs REST.
 * Las anotaciones (@Path, @GET, etc.) definen el contrato REST.
 * 
 * VENTAJAS:
 * ‚úÖ Est√°ndar Jakarta EE (no vendor lock-in)
 * ‚úÖ Declarativo (anotaciones, poco c√≥digo)
 * ‚úÖ Serializaci√≥n JSON autom√°tica
 * ‚úÖ Manejo de errores integrado
 * 
 * üéØ RESPONSABILIDADES DE UN RESOURCE:
 * 
 * 1. RECIBIR requests HTTP
 *    ‚Üí Parsear par√°metros de URL y query strings
 * 
 * 2. VALIDAR inputs b√°sicos
 *    ‚Üí Tipos correctos, formatos v√°lidos
 * 
 * 3. DELEGAR al servicio
 *    ‚Üí El Resource NO tiene l√≥gica de negocio
 * 
 * 4. MANEJAR errores
 *    ‚Üí Convertir excepciones en HTTP status codes
 * 
 * 5. DEVOLVER respuestas HTTP
 *    ‚Üí Convertir objetos Java a JSON autom√°ticamente
 * 
 * ‚ùå LO QUE NO DEBE HACER UN RESOURCE:
 * 
 * - NO debe tener l√≥gica de negocio (eso es del Service)
 * - NO debe acceder directamente a configuraci√≥n (usa el Service)
 * - NO debe hacer c√°lculos (eso es del Service)
 * - NO debe conectarse a bases de datos (eso es del Service/Repository)
 * 
 * üîó ANOTACIONES A NIVEL DE CLASE:
 * 
 * @Path("/api/tasas"):
 *   - Define la ruta BASE de todos los endpoints
 *   - Todos los m√©todos heredan este prefijo
 * 
 * @Produces(MediaType.APPLICATION_JSON):
 *   - Todos los m√©todos devuelven JSON por defecto
 *   - Header: Content-Type: application/json
 * 
 * @Consumes(MediaType.APPLICATION_JSON):
 *   - Todos los m√©todos aceptan JSON por defecto
 *   - Header: Accept: application/json
 * 
 * üìä ENDPOINTS DISPONIBLES:
 * 
 * 1. GET  /api/tasas/config          ‚Üí Ver configuraci√≥n actual
 * 2. GET  /api/tasas/{moneda}        ‚Üí Consultar tasa de una moneda
 * 3. GET  /api/tasas/convertir/{moneda}?monto=X ‚Üí Convertir monto
 * 4. GET  /api/tasas/health          ‚Üí Health check
 * 
 * üé≠ COMPORTAMIENTO POR PERFIL:
 * 
 * Aunque este Resource es el mismo en todos los perfiles,
 * las RESPUESTAS var√≠an porque el Service usa configuraci√≥n
 * diferente seg√∫n el perfil activo.
 * 
 * EJEMPLO - Endpoint: GET /api/tasas/convertir/USD?monto=1000
 * 
 * DEV:
 *   ‚Üí comision: 0.0, limite: 999999, proveedor: MockProvider
 * 
 * TEST:
 *   ‚Üí comision: 56.25, limite: 1000, proveedor: FreeCurrencyAPI
 * 
 * PROD:
 *   ‚Üí comision: 93.75, limite: 50000, proveedor: PremiumProvider
 * 
 * @author Arquitectura TasaCorp
 * @version 1.0.0
 * @see TasaService Para la l√≥gica de negocio
 * @see ConversionResponse Para el formato de respuesta de conversiones
 * @see TasaResponse Para el formato de respuesta de consultas de tasa
 */
@Path("/api/tasas")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class TasaResource {

    // ========================================================================
    // CONSTANTES Y LOGGER
    // ========================================================================

    /**
     * Logger para registrar las peticiones HTTP.
     * 
     * üí° LOGGING EN RESOURCES:
     * 
     * Es buena pr√°ctica loguear:
     * - Cada request que llega (m√©todo + ruta)
     * - Par√°metros recibidos
     * - Errores que ocurren
     * 
     * BENEFICIOS:
     * - Debugging: Ver qu√© endpoints se est√°n llamando
     * - Auditor√≠a: Rastrear qui√©n usa qu√©
     * - Monitoreo: Detectar endpoints con alto tr√°fico
     * - Troubleshooting: Investigar problemas en producci√≥n
     * 
     * EJEMPLO DE LOG:
     * INFO  [pe.ban.tas.res.TasaResource] Endpoint: GET /api/tasas/USD
     * INFO  [pe.ban.tas.res.TasaResource] Endpoint: GET /api/tasas/convertir/EUR?monto=500.00
     */
    private static final Logger LOG = Logger.getLogger(TasaResource.class);

    // ========================================================================
    // DEPENDENCIAS INYECTADAS
    // ========================================================================

    /**
     * Servicio de tasas de cambio.
     * 
     * üíâ @Inject:
     * Quarkus inyecta autom√°ticamente una instancia del servicio.
     * 
     * üéØ PATR√ìN DE DISE√ëO:
     * Esto es DEPENDENCY INJECTION (Inyecci√≥n de Dependencias):
     * 
     * MAL (acoplamiento fuerte):
     * <pre>
     * TasaService tasaService = new TasaService(); // ‚ùå
     * </pre>
     * 
     * BIEN (acoplamiento d√©bil):
     * <pre>
     * @Inject
     * TasaService tasaService; // ‚úÖ
     * </pre>
     * 
     * VENTAJAS:
     * ‚úÖ El Resource no necesita saber C√ìMO crear el Service
     * ‚úÖ F√°cil de testear (puedes inyectar un mock)
     * ‚úÖ El framework maneja el ciclo de vida
     * ‚úÖ Se comparte una sola instancia (eficiente)
     * 
     * üí° SEPARACI√ìN DE RESPONSABILIDADES:
     * 
     * TasaResource: "¬øQu√© endpoint llamaron?"
     *     ‚Üì
     * TasaService: "¬øQu√© l√≥gica ejecutar?"
     *     ‚Üì
     * TasaCorpConfig: "¬øQu√© configuraci√≥n usar?"
     * 
     * Cada capa tiene una responsabilidad clara y √∫nica.
     */
    @Inject
    TasaService tasaService;

    // ========================================================================
    // ENDPOINTS REST
    // ========================================================================

    /**
     * Endpoint para obtener la configuraci√≥n actual del sistema.
     * 
     * üìã ENDPOINT:
     * GET /api/tasas/config
     * 
     * üéØ PROP√ìSITO:
     * Exponer la configuraci√≥n activa para debugging y verificaci√≥n.
     * √ötil para scripts de prueba y monitoreo.
     * 
     * üìä RESPUESTA:
     * HTTP 200 OK
     * Content-Type: application/json
     * 
     * Body:
     * {
     *   "aplicacion": "TasaCorp API",
     *   "perfil_activo": "prod",
     *   "ambiente": "producci√≥n",
     *   "proveedor": "PremiumProvider",
     *   "proveedor_url": "https://api.currencylayer.com/live",
     *   "moneda_base": "PEN",
     *   "monedas_soportadas": ["USD", "EUR", "MXN"],
     *   "limite_transaccional": 50000,
     *   "comision_porcentaje": 2.5,
     *   "cache_habilitado": true,
     *   "auditoria_habilitada": true,
     *   "refresh_minutos": 15
     * }
     * 
     * üí° ANOTACIONES:
     * 
     * @GET:
     *   - Este m√©todo responde a peticiones HTTP GET
     *   - Solo lectura, no modifica nada (idempotente)
     * 
     * @Path("/config"):
     *   - Ruta espec√≠fica de este m√©todo
     *   - Ruta completa: /api/tasas + /config = /api/tasas/config
     * 
     * üìù EJEMPLO DE USO:
     * 
     * curl http://localhost:8080/api/tasas/config
     * 
     * O en un browser:
     * http://localhost:8080/api/tasas/config
     * 
     * üîç USO EN SCRIPTS DE PRUEBA:
     * Los scripts test-part1-config.sh y test-part2-profiles.sh
     * llaman este endpoint para validar que la configuraci√≥n
     * sea la correcta seg√∫n el perfil activo.
     * 
     * @return Response HTTP 200 con la configuraci√≥n en JSON
     */
    @GET
    @Path("/config")
    public Response obtenerConfiguracion() {
        // Loguear la petici√≥n recibida
        LOG.info("Endpoint: GET /api/tasas/config");
        
        // Delegar al servicio para obtener la configuraci√≥n
        Map<String, Object> config = tasaService.obtenerConfiguracion();
        
        // Construir respuesta HTTP 200 OK con el mapa como JSON
        // Quarkus convierte autom√°ticamente el Map a JSON
        return Response.ok(config).build();
    }

    /**
     * Endpoint para consultar la tasa de cambio de una moneda espec√≠fica.
     * 
     * üìã ENDPOINT:
     * GET /api/tasas/{moneda}
     * 
     * üéØ PROP√ìSITO:
     * Permite consultar la tasa actual SIN realizar conversi√≥n.
     * El cliente pregunta: "¬øA cu√°nto est√° el d√≥lar?"
     * 
     * üìä EJEMPLOS DE USO:
     * 
     * GET /api/tasas/USD  ‚Üí Tasa del d√≥lar
     * GET /api/tasas/EUR  ‚Üí Tasa del euro
     * GET /api/tasas/MXN  ‚Üí Tasa del peso mexicano
     * GET /api/tasas/JPY  ‚Üí Error 400 (no soportado)
     * 
     * üì• PAR√ÅMETROS:
     * 
     * {moneda} (path parameter):
     *   - C√≥digo de la moneda destino
     *   - Ejemplo: "USD", "EUR", "MXN"
     *   - Case insensitive: "usd" ‚Üí "USD"
     * 
     * üí° @PathParam:
     * Extrae el valor de {moneda} de la URL y lo pasa al m√©todo.
     * 
     * URL:    /api/tasas/USD
     *                     ^^^
     *                     ‚Üì
     * M√©todo: obtenerTasa(moneda="USD")
     * 
     * üìä RESPUESTA EXITOSA:
     * HTTP 200 OK
     * Content-Type: application/json
     * 
     * Body:
     * {
     *   "moneda_origen": "PEN",
     *   "moneda_destino": "USD",
     *   "tasa_cambio": 3.75,
     *   "comision_porcentaje": 2.5,
     *   "proveedor": "PremiumProvider",
     *   "ambiente": "producci√≥n"
     * }
     * 
     * üìä RESPUESTA DE ERROR:
     * HTTP 400 BAD REQUEST
     * Content-Type: application/json
     * 
     * Body:
     * {
     *   "error": "Moneda no soportada: JPY"
     * }
     * 
     * üîç MANEJO DE ERRORES:
     * 
     * Si el servicio lanza IllegalArgumentException (moneda no soportada),
     * el Resource lo captura y devuelve un HTTP 400 con mensaje descriptivo.
     * 
     * FLUJO:
     * 1. Cliente pide /api/tasas/JPY
     * 2. Service valida y lanza IllegalArgumentException
     * 3. Resource captura la excepci√≥n
     * 4. Resource devuelve HTTP 400 con {"error": "..."}
     * 5. Cliente recibe error descriptivo
     * 
     * üìù EJEMPLO DE USO:
     * 
     * curl http://localhost:8080/api/tasas/USD
     * 
     * @param moneda C√≥digo de la moneda destino (extra√≠do de la URL)
     * @return Response HTTP 200 con TasaResponse en JSON, o HTTP 400 si hay error
     */
    @GET
    @Path("/{moneda}")
    public Response obtenerTasa(@PathParam("moneda") String moneda) {
        // Loguear la petici√≥n con el par√°metro recibido
        LOG.infof("Endpoint: GET /api/tasas/%s", moneda);
        
        try {
            // Normalizar a may√∫sculas y delegar al servicio
            // toUpperCase(): "usd" ‚Üí "USD" (aceptar cualquier case)
            TasaResponse response = tasaService.obtenerTasa(moneda.toUpperCase());
            
            // Si todo OK, devolver HTTP 200 con el DTO
            // Quarkus serializa autom√°ticamente TasaResponse a JSON
            return Response.ok(response).build();
            
        } catch (IllegalArgumentException e) {
            // Si el servicio lanza excepci√≥n (moneda no soportada),
            // devolver HTTP 400 BAD REQUEST con el mensaje de error
            return Response.status(Response.Status.BAD_REQUEST)
                          .entity(Map.of("error", e.getMessage()))
                          .build();
        }
    }

    /**
     * Endpoint para convertir un monto de PEN a otra moneda.
     * 
     * üìã ENDPOINT:
     * GET /api/tasas/convertir/{moneda}?monto={cantidad}
     * 
     * üéØ PROP√ìSITO:
     * Realiza una conversi√≥n completa incluyendo:
     * - C√°lculo de conversi√≥n
     * - Aplicaci√≥n de comisi√≥n
     * - Validaci√≥n de l√≠mites
     * 
     * üìä EJEMPLOS DE USO:
     * 
     * GET /api/tasas/convertir/USD?monto=1000
     *   ‚Üí Convertir 1000 PEN a USD
     * 
     * GET /api/tasas/convertir/EUR?monto=500.50
     *   ‚Üí Convertir 500.50 PEN a EUR
     * 
     * GET /api/tasas/convertir/MXN
     *   ‚Üí Convertir 100 PEN a MXN (monto por defecto)
     * 
     * üì• PAR√ÅMETROS:
     * 
     * {moneda} (path parameter):
     *   - C√≥digo de la moneda destino
     *   - Ejemplo: "USD", "EUR", "MXN"
     *   - Obligatorio
     *   - @PathParam extrae de la URL
     * 
     * monto (query parameter):
     *   - Cantidad en PEN a convertir
     *   - Ejemplo: 1000, 500.50
     *   - Opcional (default: 100)
     *   - @QueryParam extrae del query string
     *   - @DefaultValue("100") si no se proporciona
     * 
     * üí° QUERY PARAMETER vs PATH PARAMETER:
     * 
     * PATH PARAMETER (parte de la ruta):
     *   /api/tasas/convertir/USD
     *                        ^^^
     *   - Identifica el RECURSO
     *   - Obligatorio (no puede faltar)
     *   - Afecta la sem√°ntica de la URL
     * 
     * QUERY PARAMETER (despu√©s de ?):
     *   /api/tasas/convertir/USD?monto=1000
     *                             ^^^^^^^^^^
     *   - FILTRA o MODIFICA el recurso
     *   - Opcional (puede tener default)
     *   - No afecta la sem√°ntica de la URL
     * 
     * üìä RESPUESTA EXITOSA:
     * HTTP 200 OK
     * Content-Type: application/json
     * 
     * Body (ejemplo en PROD):
     * {
     *   "monto_origen": 1000.0,
     *   "moneda_origen": "PEN",
     *   "monto_convertido": 3750.0,
     *   "moneda_destino": "USD",
     *   "tasa_aplicada": 3.75,
     *   "comision": 93.75,
     *   "monto_total": 3843.75,
     *   "proveedor": "PremiumProvider",
     *   "limite_transaccional": 50000,
     *   "dentro_limite": true
     * }
     * 
     * üìä RESPUESTA DE ERROR:
     * HTTP 400 BAD REQUEST
     * Content-Type: application/json
     * 
     * Body:
     * {
     *   "error": "Moneda no soportada: JPY"
     * }
     * 
     * üé≠ COMPORTAMIENTO POR PERFIL:
     * 
     * Mismo endpoint, diferentes resultados seg√∫n perfil:
     * 
     * GET /api/tasas/convertir/USD?monto=1000
     * 
     * DEV:
     *   - comision: 0.0 (gratis)
     *   - limite_transaccional: 999999
     *   - dentro_limite: true
     *   - proveedor: MockProvider
     * 
     * TEST:
     *   - comision: 56.25 (1.5%)
     *   - limite_transaccional: 1000
     *   - dentro_limite: true
     *   - proveedor: FreeCurrencyAPI
     * 
     * PROD:
     *   - comision: 93.75 (2.5%)
     *   - limite_transaccional: 50000
     *   - dentro_limite: true
     *   - proveedor: PremiumProvider
     * 
     * üìù EJEMPLO DE USO:
     * 
     * curl "http://localhost:8080/api/tasas/convertir/USD?monto=1000"
     * 
     * Nota: Las comillas son importantes en shells para preservar el ?
     * 
     * @param moneda C√≥digo de la moneda destino (extra√≠do de la URL)
     * @param monto Cantidad en PEN a convertir (extra√≠da del query string, default 100)
     * @return Response HTTP 200 con ConversionResponse en JSON, o HTTP 400 si hay error
     */
    @GET
    @Path("/convertir/{moneda}")
    public Response convertirMoneda(
            @PathParam("moneda") String moneda,
            @QueryParam("monto") @DefaultValue("100") Double monto) {
        
        // Loguear la petici√≥n con todos los par√°metros
        LOG.infof("Endpoint: GET /api/tasas/convertir/%s?monto=%.2f", moneda, monto);
        
        try {
            // Normalizar a may√∫sculas y delegar al servicio
            ConversionResponse response = tasaService.convertirMoneda(moneda.toUpperCase(), monto);
            
            // Si todo OK, devolver HTTP 200 con el DTO completo
            // Quarkus serializa autom√°ticamente ConversionResponse a JSON
            return Response.ok(response).build();
            
        } catch (IllegalArgumentException e) {
            // Si el servicio lanza excepci√≥n (moneda no soportada),
            // devolver HTTP 400 BAD REQUEST con el mensaje de error
            return Response.status(Response.Status.BAD_REQUEST)
                          .entity(Map.of("error", e.getMessage()))
                          .build();
        }
    }

    /**
     * Endpoint de health check simple.
     * 
     * üìã ENDPOINT:
     * GET /api/tasas/health
     * 
     * üéØ PROP√ìSITO:
     * Verificar que el servicio est√° vivo y respondiendo.
     * 
     * üí° HEALTH CHECKS:
     * 
     * Los health checks son esenciales en producci√≥n para:
     * 
     * - KUBERNETES: Saber cu√°ndo reiniciar un pod
     * - LOAD BALANCERS: Saber a qu√© instancias enviar tr√°fico
     * - MONITOREO: Detectar servicios ca√≠dos
     * - ALERTAS: Notificar cuando algo falla
     * 
     * TIPOS DE HEALTH CHECKS:
     * 
     * 1. Liveness (¬øest√° vivo?):
     *    - Si falla ‚Üí reiniciar contenedor
     *    - Este endpoint es un liveness simple
     * 
     * 2. Readiness (¬øest√° listo?):
     *    - Si falla ‚Üí no enviar tr√°fico
     *    - Verificar√≠a dependencias (DB, Vault, etc.)
     * 
     * üèóÔ∏è HEALTH CHECK PROFESIONAL:
     * 
     * Quarkus tiene health checks integrados en:
     * /q/health/live
     * /q/health/ready
     * 
     * Este endpoint es una versi√≥n simplificada para demostraci√≥n.
     * 
     * üìä RESPUESTA:
     * HTTP 200 OK
     * Content-Type: application/json
     * 
     * Body:
     * {
     *   "status": "UP",
     *   "servicio": "TasaCorp API"
     * }
     * 
     * üìù EJEMPLO DE USO:
     * 
     * curl http://localhost:8080/api/tasas/health
     * 
     * En Kubernetes:
     * <pre>
     * livenessProbe:
     *   httpGet:
     *     path: /api/tasas/health
     *     port: 8080
     *   initialDelaySeconds: 10
     *   periodSeconds: 5
     * </pre>
     * 
     * üí° NOTA:
     * Este es un health check b√°sico que SIEMPRE devuelve UP.
     * En producci√≥n real, verificar√≠amos:
     * - Conexi√≥n a base de datos
     * - Conexi√≥n a Vault
     * - Conexi√≥n al proveedor de tasas
     * - Memoria/CPU disponible
     * 
     * @return Response HTTP 200 con status UP
     */
    @GET
    @Path("/health")
    public Response health() {
        // No es necesario loguear (se llama muy frecuentemente)
        // En producci√≥n, evita contaminar logs con health checks
        
        // Devolver respuesta simple indicando que el servicio est√° UP
        return Response.ok(Map.of(
            "status", "UP",
            "servicio", "TasaCorp API"
        )).build();
    }
}