package pe.banco.tasacorp.service;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.jboss.logging.Logger;
import pe.banco.tasacorp.config.TasaCorpConfig;
import pe.banco.tasacorp.model.ConversionResponse;
import pe.banco.tasacorp.model.TasaResponse;

import java.util.HashMap;
import java.util.Map;

/**
 * Servicio de tasas de cambio - L√≥gica de negocio principal.
 * 
 * üìã PROP√ìSITO:
 * Este servicio centraliza toda la l√≥gica de negocio relacionada con
 * tasas de cambio y conversiones de moneda. Es el "cerebro" de la aplicaci√≥n.
 * 
 * üèóÔ∏è ARQUITECTURA:
 * 
 * Flujo de una solicitud:
 * 
 * Cliente HTTP
 *     ‚Üì
 * TasaResource (REST)
 *     ‚Üì
 * TasaService (L√ìGICA) ‚Üê Estamos aqu√≠
 *     ‚Üì
 * TasaCorpConfig (CONFIGURACI√ìN)
 *     ‚Üì
 * DTOs (ConversionResponse / TasaResponse)
 *     ‚Üì
 * Cliente recibe JSON
 * 
 * üí° @ApplicationScoped:
 * 
 * Esta anotaci√≥n indica que:
 * - Se crea UNA SOLA instancia de este servicio
 * - Vive durante toda la vida de la aplicaci√≥n
 * - Se comparte entre todos los requests
 * 
 * VENTAJAS:
 * ‚úÖ Eficiente: No se crea/destruye en cada request
 * ‚úÖ Stateless: No guarda estado entre requests (thread-safe)
 * ‚úÖ Inyectable: Puede inyectarse en cualquier componente
 * 
 * ANALOG√çA:
 * Es como tener UN calculador de tasas en el banco que atiende
 * a todos los clientes, en lugar de crear uno nuevo por cliente.
 * 
 * üéØ RESPONSABILIDADES:
 * 
 * 1. Consultar tasas de cambio
 *    ‚Üí obtenerTasa(String moneda)
 * 
 * 2. Realizar conversiones completas
 *    ‚Üí convertirMoneda(String moneda, Double monto)
 * 
 * 3. Exponer configuraci√≥n actual
 *    ‚Üí obtenerConfiguracion()
 * 
 * 4. Validar monedas soportadas
 *    ‚Üí Lanza excepci√≥n si la moneda no existe
 * 
 * 5. Validar l√≠mites transaccionales
 *    ‚Üí Marca si la transacci√≥n excede el l√≠mite
 * 
 * üîê SEGURIDAD:
 * - No expone el API key en las respuestas
 * - Valida todas las entradas
 * - Registra operaciones en logs
 * 
 * üìä CONFIGURACI√ìN DEPENDIENTE DE PERFIL:
 * 
 * Todos los c√°lculos var√≠an seg√∫n el perfil activo:
 * 
 * DEV:
 *   - Comisi√≥n: 0.0%
 *   - L√≠mite: 999,999
 *   - Proveedor: MockProvider
 * 
 * TEST:
 *   - Comisi√≥n: 1.5%
 *   - L√≠mite: 1,000
 *   - Proveedor: FreeCurrencyAPI
 * 
 * PROD:
 *   - Comisi√≥n: 2.5%
 *   - L√≠mite: 50,000
 *   - Proveedor: PremiumProvider
 * 
 * @author Arquitectura TasaCorp
 * @version 1.0.0
 * @see TasaCorpConfig Para la configuraci√≥n inyectada
 * @see TasaResource Para los endpoints REST que usan este servicio
 */
@ApplicationScoped
public class TasaService {

    // ========================================================================
    // CONSTANTES Y LOGGER
    // ========================================================================

    /**
     * Logger para registrar operaciones del servicio.
     * 
     * üí° ¬øPOR QU√â LOGGER?
     * 
     * Los logs son cruciales para:
     * - Debugging: Ver qu√© est√° pasando en runtime
     * - Auditor√≠a: Registrar operaciones importantes
     * - Monitoreo: Detectar problemas en producci√≥n
     * - Troubleshooting: Investigar errores pasados
     * 
     * NIVELES DE LOG USADOS:
     * - INFO:  Operaciones normales (obtener tasa, convertir)
     * - WARN:  Situaciones at√≠picas pero manejables (l√≠mite excedido)
     * - ERROR: Errores graves (no se usan aqu√≠, pero existir√≠an)
     * 
     * EJEMPLO DE LOG:
     * INFO  [pe.ban.tas.ser.TasaService] Obteniendo tasa para USD en perfil: prod
     * WARN  [pe.ban.tas.ser.TasaService] Monto 60000.00 excede el l√≠mite transaccional de 50000
     */
    private static final Logger LOG = Logger.getLogger(TasaService.class);

    // ========================================================================
    // DEPENDENCIAS INYECTADAS
    // ========================================================================

    /**
     * Configuraci√≥n completa de TasaCorp.
     * 
     * üíâ @Inject:
     * Quarkus inyecta autom√°ticamente la configuraci√≥n al crear el servicio.
     * 
     * üéØ USO:
     * Permite acceder a toda la configuraci√≥n de forma type-safe:
     * 
     * <pre>
     * String base = config.currency().base();              // "PEN"
     * List<String> supported = config.currency().supported(); // [USD, EUR, MXN]
     * Double rate = config.commission().rate();             // 2.5 (var√≠a por perfil)
     * </pre>
     * 
     * üîÑ REACTIVIDAD:
     * Esta configuraci√≥n es INMUTABLE despu√©s del arranque.
     * Para cambiar valores, hay que reiniciar la aplicaci√≥n.
     * 
     * VENTAJAS VS @ConfigProperty:
     * ‚úÖ Acceso jer√°rquico organizado
     * ‚úÖ Autocompletado en IDE
     * ‚úÖ Type-safe (errores en compilaci√≥n)
     * ‚úÖ Menos verboso
     */
    @Inject
    TasaCorpConfig config;

    /**
     * Nombre de la aplicaci√≥n.
     * 
     * üíâ @ConfigProperty:
     * Para valores INDIVIDUALES simples, se puede usar esta anotaci√≥n.
     * 
     * Mapea: app.name=TasaCorp API (desde application.properties)
     * 
     * üéØ USO:
     * Se incluye en el endpoint /api/tasas/config para identificar la app.
     * 
     * üí° CU√ÅNDO USAR @ConfigProperty VS @ConfigMapping:
     * 
     * @ConfigProperty: Para 1-3 propiedades sueltas
     * @ConfigMapping:  Para grupos relacionados de propiedades
     */
    @ConfigProperty(name = "app.name")
    String appName;

    /**
     * Perfil activo de Quarkus.
     * 
     * üíâ @ConfigProperty:
     * Inyecta el perfil actualmente en ejecuci√≥n.
     * 
     * Posibles valores:
     * - "dev"  (desarrollo)
     * - "test" (testing)
     * - "prod" (producci√≥n)
     * 
     * üéØ USO:
     * - Logging: Registrar en qu√© perfil se ejecutan operaciones
     * - Debugging: Identificar comportamientos espec√≠ficos de perfil
     * - Responses: Incluir el perfil en respuestas (opcional)
     * 
     * üí° AUTOM√ÅTICO:
     * Quarkus lo establece seg√∫n c√≥mo arranques:
     * - ./mvnw quarkus:dev ‚Üí "dev"
     * - mvn test ‚Üí "test"
     * - java -jar app.jar ‚Üí "prod"
     * - java -jar app.jar -Dquarkus.profile=X ‚Üí "X"
     */
    @ConfigProperty(name = "quarkus.profile")
    String activeProfile;

    // ========================================================================
    // M√âTODOS P√öBLICOS - L√≥gica de Negocio
    // ========================================================================

    /**
     * Obtiene la tasa de cambio para una moneda espec√≠fica.
     * 
     * üìã FUNCIONALIDAD:
     * Consulta la tasa actual para convertir de PEN a la moneda destino.
     * NO realiza ninguna conversi√≥n, solo informa la tasa.
     * 
     * üéØ CASO DE USO:
     * Un cliente quiere saber: "¬øA cu√°nto est√° el d√≥lar hoy?"
     * Este m√©todo responde con la tasa y la comisi√≥n que se aplicar√≠a.
     * 
     * üìä FLUJO:
     * 1. Loguear la operaci√≥n
     * 2. Validar que la moneda est√© soportada
     * 3. Obtener la tasa desde configuraci√≥n
     * 4. Construir y devolver TasaResponse
     * 
     * üîç VALIDACI√ìN:
     * Si la moneda no est√° en config.currency().supported(),
     * lanza IllegalArgumentException que se convierte en HTTP 400.
     * 
     * üìù EJEMPLO:
     * 
     * Input:  "USD"
     * Output: TasaResponse {
     *           moneda_origen: "PEN",
     *           moneda_destino: "USD",
     *           tasa_cambio: 3.75,
     *           comision_porcentaje: 2.5 (var√≠a por perfil),
     *           proveedor: "PremiumProvider" (var√≠a por perfil),
     *           ambiente: "producci√≥n" (var√≠a por perfil)
     *         }
     * 
     * @param monedaDestino C√≥digo de la moneda destino (USD, EUR, MXN)
     * @return TasaResponse con la tasa e informaci√≥n contextual
     * @throws IllegalArgumentException Si la moneda no est√° soportada
     */
    public TasaResponse obtenerTasa(String monedaDestino) {
        // Loguear la operaci√≥n con el perfil activo
        LOG.infof("Obteniendo tasa para %s en perfil: %s", monedaDestino, activeProfile);

        // VALIDACI√ìN 1: Moneda soportada
        // Verifica que la moneda est√© en la lista de soportadas
        if (!config.currency().supported().contains(monedaDestino)) {
            throw new IllegalArgumentException("Moneda no soportada: " + monedaDestino);
        }

        // Obtener tasa seg√∫n la moneda desde configuraci√≥n
        Double tasa = obtenerTasaPorMoneda(monedaDestino);

        // Construir respuesta con toda la informaci√≥n contextual
        return new TasaResponse(
            config.currency().base(),           // PEN
            monedaDestino,                      // USD, EUR, o MXN
            tasa,                               // 3.75, 4.10, o 0.22
            config.commission().rate(),         // 0.0, 1.5, o 2.5 (seg√∫n perfil)
            config.provider().name(),           // MockProvider, FreeCurrencyAPI, o PremiumProvider
            config.metadata().environment()     // desarrollo, testing, o producci√≥n
        );
    }

    /**
     * Realiza una conversi√≥n completa de moneda con todos los c√°lculos.
     * 
     * üìã FUNCIONALIDAD:
     * Convierte un monto de PEN a la moneda destino, aplicando:
     * 1. Tasa de cambio
     * 2. Comisi√≥n (var√≠a por perfil)
     * 3. Validaci√≥n de l√≠mite transaccional
     * 
     * üéØ CASO DE USO:
     * Un cliente quiere: "Convertir 1000 PEN a USD"
     * Este m√©todo calcula y devuelve:
     * - Cu√°ntos USD obtienes
     * - Cu√°nto de comisi√≥n pagas
     * - El total final
     * - Si est√°s dentro del l√≠mite
     * 
     * üìä FLUJO DE C√ÅLCULO:
     * 
     * PASO 1: Validar moneda soportada
     * PASO 2: Obtener tasa desde config
     * PASO 3: Calcular conversi√≥n
     *         montoConvertido = monto √ó tasa
     *         Ejemplo: 1000 √ó 3.75 = 3750 USD
     * 
     * PASO 4: Calcular comisi√≥n
     *         comision = montoConvertido √ó (rate / 100)
     *         Ejemplo (PROD): 3750 √ó (2.5 / 100) = 93.75 USD
     * 
     * PASO 5: Calcular total
     *         montoTotal = montoConvertido + comision
     *         Ejemplo: 3750 + 93.75 = 3843.75 USD
     * 
     * PASO 6: Validar l√≠mite transaccional
     *         dentroLimite = monto <= limit
     *         Ejemplo (PROD): 1000 <= 50000 ‚Üí true ‚úÖ
     * 
     * üîç VALIDACIONES:
     * 
     * 1. Moneda no soportada ‚Üí IllegalArgumentException (HTTP 400)
     * 2. L√≠mite excedido ‚Üí Log warning + dentroLimite=false
     *    (NO se rechaza, solo se marca)
     * 
     * üí° NOTA SOBRE L√çMITES:
     * En este ejercicio, si se excede el l√≠mite solo se MARCA en la respuesta.
     * En producci√≥n real, probablemente se rechazar√≠a la transacci√≥n completa.
     * 
     * üìù EJEMPLO COMPLETO (PROD):
     * 
     * Input:  monedaDestino="USD", monto=1000.0
     * 
     * C√°lculos:
     * - tasa = 3.75 (config)
     * - convertido = 1000 √ó 3.75 = 3750.0
     * - comision = 3750 √ó 0.025 = 93.75
     * - total = 3750 + 93.75 = 3843.75
     * - limite = 50000 (config)
     * - dentro = 1000 <= 50000 = true
     * 
     * Output: ConversionResponse {
     *           monto_origen: 1000.0,
     *           moneda_origen: "PEN",
     *           monto_convertido: 3750.0,
     *           moneda_destino: "USD",
     *           tasa_aplicada: 3.75,
     *           comision: 93.75,
     *           monto_total: 3843.75,
     *           proveedor: "PremiumProvider",
     *           limite_transaccional: 50000,
     *           dentro_limite: true
     *         }
     * 
     * @param monedaDestino C√≥digo de la moneda destino (USD, EUR, MXN)
     * @param monto Cantidad en PEN a convertir
     * @return ConversionResponse con todos los detalles de la conversi√≥n
     * @throws IllegalArgumentException Si la moneda no est√° soportada
     */
    public ConversionResponse convertirMoneda(String monedaDestino, Double monto) {
        // Loguear la operaci√≥n detalladamente
        LOG.infof("Convirtiendo %.2f %s a %s", monto, config.currency().base(), monedaDestino);

        // VALIDACI√ìN 1: Moneda soportada
        if (!config.currency().supported().contains(monedaDestino)) {
            throw new IllegalArgumentException("Moneda no soportada: " + monedaDestino);
        }

        // PASO 1: Obtener tasa de cambio
        Double tasa = obtenerTasaPorMoneda(monedaDestino);

        // PASO 2: Calcular conversi√≥n b√°sica
        // F√≥rmula: montoConvertido = montoOriginal √ó tasaCambio
        Double montoConvertido = monto * tasa;

        // PASO 3: Calcular comisi√≥n
        // F√≥rmula: comision = montoConvertido √ó (porcentaje / 100)
        // 
        // Ejemplo en PROD (rate=2.5):
        // comision = 3750 √ó (2.5 / 100) = 3750 √ó 0.025 = 93.75
        //
        // Ejemplo en DEV (rate=0.0):
        // comision = 3750 √ó (0.0 / 100) = 0.0
        Double comision = montoConvertido * (config.commission().rate() / 100);

        // PASO 4: Calcular monto total
        // F√≥rmula: total = convertido + comisi√≥n
        // El usuario recibe/paga: montoConvertido
        // El banco cobra: comision
        // Total de la operaci√≥n: montoTotal
        Double montoTotal = montoConvertido + comision;

        // PASO 5: Validar l√≠mite transaccional
        // Compara el monto ORIGINAL (en PEN) contra el l√≠mite configurado
        Boolean dentroLimite = monto <= config.transaction().limit();

        // Si excede el l√≠mite, registrar una advertencia
        if (!dentroLimite) {
            LOG.warnf("Monto %.2f excede el l√≠mite transaccional de %d", 
                     monto, config.transaction().limit());
        }

        // PASO 6: Construir respuesta completa
        return new ConversionResponse(
            monto,                          // Monto original en PEN
            config.currency().base(),       // PEN
            montoConvertido,                // Resultado de la conversi√≥n
            monedaDestino,                  // USD, EUR, o MXN
            tasa,                           // Tasa utilizada
            comision,                       // Comisi√≥n calculada
            montoTotal,                     // Total (conversi√≥n + comisi√≥n)
            config.provider().name(),       // Proveedor seg√∫n perfil
            config.transaction().limit(),   // L√≠mite seg√∫n perfil
            dentroLimite                    // Si cumple el l√≠mite
        );
    }

    /**
     * Obtiene un mapa con toda la configuraci√≥n actual del sistema.
     * 
     * üìã FUNCIONALIDAD:
     * Expone la configuraci√≥n completa en un formato JSON amigable
     * para debugging y verificaci√≥n de ambiente.
     * 
     * üéØ CASO DE USO:
     * - Verificar en qu√© perfil est√° corriendo la app
     * - Debugging: Ver qu√© configuraci√≥n est√° activa
     * - Monitoreo: Endpoints de health/info incluyen esta data
     * - Scripts de prueba: Validar configuraci√≥n autom√°ticamente
     * 
     * üîê SEGURIDAD:
     * NOTA: Este m√©todo NO expone el API key por seguridad.
     * Solo muestra la URL del proveedor, pero no las credenciales.
     * 
     * üìä ESTRUCTURA DE RESPUESTA:
     * 
     * {
     *   "aplicacion": "TasaCorp API",
     *   "perfil_activo": "prod",
     *   "ambiente": "producci√≥n",
     *   "proveedor": "PremiumProvider",
     *   "proveedor_url": "https://api.currencylayer.com/live",
     *   "moneda_base": "PEN",
     *   "monedas_soportadas": ["USD", "EUR", "MXN"],
     *   "limite_transaccional": 50000,
     *   "comision_porcentaje": 2.5,
     *   "cache_habilitado": true,
     *   "auditoria_habilitada": true,
     *   "refresh_minutos": 15
     * }
     * 
     * üí° USO EN SCRIPTS DE PRUEBA:
     * Los scripts test-part1-config.sh y test-part2-profiles.sh
     * consultan este endpoint para validar que la configuraci√≥n
     * sea la correcta seg√∫n el perfil activo.
     * 
     * @return Map con toda la configuraci√≥n visible del sistema
     */
    public Map<String, Object> obtenerConfiguracion() {
        // Loguear la consulta con el perfil actual
        LOG.infof("Obteniendo configuraci√≥n para perfil: %s", activeProfile);

        // Crear mapa para almacenar toda la configuraci√≥n
        Map<String, Object> configMap = new HashMap<>();
        
        // INFORMACI√ìN GENERAL
        configMap.put("aplicacion", appName);
        configMap.put("perfil_activo", activeProfile);
        configMap.put("ambiente", config.metadata().environment());
        
        // CONFIGURACI√ìN DEL PROVEEDOR
        configMap.put("proveedor", config.provider().name());
        configMap.put("proveedor_url", config.provider().url());
        // NOTA: NO incluimos el API key por seguridad
        
        // CONFIGURACI√ìN DE MONEDAS
        configMap.put("moneda_base", config.currency().base());
        configMap.put("monedas_soportadas", config.currency().supported());
        
        // CONFIGURACI√ìN DE TRANSACCIONES Y COMISIONES
        configMap.put("limite_transaccional", config.transaction().limit());
        configMap.put("comision_porcentaje", config.commission().rate());
        
        // CONFIGURACI√ìN DE CARACTER√çSTICAS
        configMap.put("cache_habilitado", config.features().cacheEnabled());
        configMap.put("auditoria_habilitada", config.features().auditEnabled());
        configMap.put("refresh_minutos", config.features().rateRefreshMinutes());
        
        return configMap;
    }

    // ========================================================================
    // M√âTODOS PRIVADOS - Utilidades Internas
    // ========================================================================

    /**
     * M√©todo privado para obtener la tasa seg√∫n la moneda.
     * 
     * üìã FUNCIONALIDAD:
     * Resuelve qu√© tasa corresponde a cada moneda desde la configuraci√≥n.
     * 
     * üí° SWITCH EXPRESSION (Java 14+):
     * Este es un switch moderno que DEVUELVE un valor directamente.
     * 
     * Sintaxis cl√°sica (Java < 14):
     * <pre>
     * Double tasa;
     * switch (moneda) {
     *     case "USD":
     *         tasa = config.exchange().rates().usd();
     *         break;
     *     case "EUR":
     *         tasa = config.exchange().rates().eur();
     *         break;
     *     case "MXN":
     *         tasa = config.exchange().rates().mxn();
     *         break;
     *     default:
     *         throw new IllegalArgumentException("...");
     * }
     * return tasa;
     * </pre>
     * 
     * Sintaxis moderna (Java 14+):
     * <pre>
     * return switch (moneda) {
     *     case "USD" -> config.exchange().rates().usd();
     *     case "EUR" -> config.exchange().rates().eur();
     *     case "MXN" -> config.exchange().rates().mxn();
     *     default -> throw new IllegalArgumentException("...");
     * };
     * </pre>
     * 
     * VENTAJAS:
     * ‚úÖ M√°s conciso
     * ‚úÖ Retorno directo
     * ‚úÖ No hay break (autom√°tico)
     * ‚úÖ Exhaustividad verificada por compilador
     * 
     * üîó MAPEO DE TASAS:
     * 
     * Moneda ‚Üí Propiedad de configuraci√≥n
     * ----------------------------------------
     * "USD"  ‚Üí tasacorp.exchange.rates.usd (3.75)
     * "EUR"  ‚Üí tasacorp.exchange.rates.eur (4.10)
     * "MXN"  ‚Üí tasacorp.exchange.rates.mxn (0.22)
     * 
     * üìù EJEMPLO:
     * 
     * Input:  "USD"
     * Output: 3.75
     * 
     * Input:  "EUR"
     * Output: 4.10
     * 
     * Input:  "JPY"
     * Output: IllegalArgumentException (no configurada)
     * 
     * @param moneda C√≥digo de la moneda (USD, EUR, MXN)
     * @return La tasa de cambio configurada para esa moneda
     * @throws IllegalArgumentException Si la moneda no est√° configurada
     */
    private Double obtenerTasaPorMoneda(String moneda) {
        return switch (moneda) {
            case "USD" -> config.exchange().rates().usd();
            case "EUR" -> config.exchange().rates().eur();
            case "MXN" -> config.exchange().rates().mxn();
            default -> throw new IllegalArgumentException("Moneda no configurada: " + moneda);
        };
    }
}