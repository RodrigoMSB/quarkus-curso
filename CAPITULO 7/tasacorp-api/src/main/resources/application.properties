# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë                     TASACORP API - CONFIGURACI√ìN                         ‚ïë
# ‚ïë                  Cap√≠tulo 7: Configuraci√≥n y Perfiles                    ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
#
# üìã PROP√ìSITO DE ESTE ARCHIVO:
# Este archivo centraliza la configuraci√≥n de la aplicaci√≥n TasaCorp.
# Demuestra c√≥mo externalizar configuraciones y usar perfiles de ambiente.
#
# üéØ CONCEPTOS QUE SE DEMUESTRAN:
#
# 1. EXTERNALIZACI√ìN:
#    - Valores fuera del c√≥digo fuente
#    - Mismo binario, diferentes configuraciones
#
# 2. PERFILES DE AMBIENTE:
#    - %dev: Desarrollo local
#    - %test: Testing/QA
#    - %prod: Producci√≥n
#
# 3. CONFIGURACI√ìN SENSIBLE:
#    - Secrets en Vault (no en properties)
#    - API keys protegidas
#
# üí° C√ìMO FUNCIONA:
#
# Sin prefijo de perfil:
#   tasacorp.commission.rate=2.5
#   ‚Üí Valor BASE, se usa si no hay perfil espec√≠fico
#
# Con prefijo de perfil:
#   %prod.tasacorp.commission.rate=2.5
#   ‚Üí Valor ESPEC√çFICO para producci√≥n, sobrescribe el base
#
# üîó RELACI√ìN CON EL C√ìDIGO:
#
# Estas propiedades se inyectan en:
# - TasaCorpConfig (via @ConfigMapping)
# - TasaService (via @Inject TasaCorpConfig)
#
# üìä PRIORIDADES DE CARGA:
#
# 1. System Properties (-D)          ‚Üê M√°xima prioridad
# 2. Variables de Entorno (ENV)      ‚Üë
# 3. application.properties (perfil) ‚Üë
# 4. application.properties (base)   ‚Üë
# 5. application.yaml                ‚Üë
# 6. @WithDefault en c√≥digo          ‚Üê M√≠nima prioridad

# ========================================
# SECCI√ìN 1: INFORMACI√ìN DE LA APLICACI√ìN
# ========================================
#
# üí° PROP√ìSITO:
# Metadatos descriptivos de la aplicaci√≥n.
# √ötiles para logging, monitoreo y debugging.
#
# üîó INYECCI√ìN:
# @ConfigProperty(name = "app.name")
# String appName;

# Nombre de la aplicaci√≥n
# Usado en: TasaService, logs, respuestas /config
app.name=TasaCorp API

# Versi√≥n de la aplicaci√≥n
# √ötil para rastrear qu√© versi√≥n est√° desplegada en cada ambiente
app.version=1.0.0

# Identificaci√≥n del banco
# Puede usarse en headers HTTP, logs, o metadatos
app.banco=Banco TasaCorp Per√∫

# ========================================
# SECCI√ìN 2: CONFIGURACI√ìN DE MONEDAS
# ========================================
#
# üí° PROP√ìSITO:
# Define qu√© monedas maneja el sistema.
#
# üîó INYECCI√ìN:
# config.currency().base()      ‚Üí "PEN"
# config.currency().supported() ‚Üí ["USD", "EUR", "MXN"]
#
# üìä USO:
# - Validar que las monedas solicitadas est√©n soportadas
# - Mostrar opciones disponibles al cliente

# Moneda base del sistema
# Todas las conversiones se hacen DESDE esta moneda
# En TasaCorp: PEN (Nuevo Sol Peruano)
tasacorp.currency.base=PEN

# Lista de monedas soportadas para conversi√≥n
# Formato: C√≥digos ISO 4217 separados por coma
# Solo estas monedas pueden ser DESTINO de conversi√≥n
# Si un cliente pide JPY, se rechaza con error 400
tasacorp.currency.supported=USD,EUR,MXN

# ========================================
# SECCI√ìN 3: L√çMITES TRANSACCIONALES
# ========================================
#
# üí° PROP√ìSITO:
# Define el monto m√°ximo permitido por transacci√≥n.
# Ayuda a prevenir fraudes y errores operacionales.
#
# ‚ö†Ô∏è IMPORTANTE:
# Este valor BASE (1000) se SOBREESCRIBE en cada perfil.
# Es solo un fallback si no hay perfil espec√≠fico.
#
# üîó INYECCI√ìN:
# config.transaction().limit() ‚Üí 1000 (o valor por perfil)
#
# üìä VALORES POR PERFIL:
# - DEV:  999,999 (ilimitado para desarrollo)
# - TEST: 1,000 (bajo para facilitar pruebas)
# - PROD: 50,000 (alto pero controlado)

# L√≠mite transaccional base
# Este valor se usa solo si NO hay perfil activo
# En la pr√°ctica, siempre hay perfil (dev, test, o prod)
tasacorp.transaction.limit=1000

# ========================================
# SECCI√ìN 4: COMISIONES
# ========================================
#
# üí° PROP√ìSITO:
# Define el porcentaje de comisi√≥n cobrado por conversi√≥n.
#
# üßÆ C√ÅLCULO:
# comision = montoConvertido √ó (rate / 100)
#
# Ejemplo con rate=2.5:
# - Convertido: 3750 USD
# - Comisi√≥n: 3750 √ó 0.025 = 93.75 USD
#
# ‚ö†Ô∏è IMPORTANTE:
# Este valor BASE (2.5) se SOBREESCRIBE en cada perfil.
#
# üìä VALORES POR PERFIL:
# - DEV:  0.0% (gratis para desarrollo)
# - TEST: 1.5% (moderado para pruebas)
# - PROD: 2.5% (comisi√≥n real)

# Comisi√≥n base en porcentaje
# 2.5 significa 2.5% (NO 250%)
# Se divide entre 100 al hacer c√°lculos
tasacorp.commission.rate=2.5

# ========================================
# SECCI√ìN 5: PROVEEDOR DE TASAS
# ========================================
#
# üí° PROP√ìSITO:
# Define qu√© servicio externo proporciona las tasas de cambio.
# En un sistema real, se consultar√≠a este proveedor en tiempo real.
#
# ‚ö†Ô∏è IMPORTANTE:
# Estos valores BASE se SOBREESCRIBEN en cada perfil.
#
# üîó INYECCI√ìN:
# config.provider().name()   ‚Üí "MockProvider"
# config.provider().url()    ‚Üí "http://localhost:8080/mock"
# config.provider().apikey() ‚Üí (definido por perfil)

# Nombre del proveedor base
# En pr√°ctica, cada perfil define su propio proveedor
tasacorp.provider.name=mock

# URL del servicio del proveedor base
# En pr√°ctica, cada perfil define su propia URL
tasacorp.provider.url=http://localhost:8080/mock

# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë                      CONFIGURACI√ìN POR PERFILES                          ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
#
# üí° C√ìMO FUNCIONAN LOS PERFILES:
#
# Un perfil es una variante de configuraci√≥n que se activa seg√∫n
# el contexto de ejecuci√≥n.
#
# ACTIVACI√ìN AUTOM√ÅTICA:
# - ./mvnw quarkus:dev              ‚Üí perfil "dev"
# - mvn test                        ‚Üí perfil "test"
# - java -jar app.jar               ‚Üí perfil "prod"
#
# ACTIVACI√ìN MANUAL:
# - ./mvnw quarkus:dev -Dquarkus.profile=test
# - java -jar app.jar -Dquarkus.profile=dev
#
# SINTAXIS:
# %{perfil}.propiedad=valor
#
# Ejemplo:
# %dev.tasacorp.commission.rate=0.0
#   ‚Üë    ‚Üë                        ‚Üë
#   ‚îÇ    ‚îÇ                        ‚îî‚îÄ Valor para DEV
#   ‚îÇ    ‚îî‚îÄ Propiedad espec√≠fica
#   ‚îî‚îÄ Prefijo de perfil
#
# üéØ FILOSOF√çA DE CADA PERFIL:
#
# DEV (Desarrollo):
#   ‚Üí M√°xima velocidad de desarrollo
#   ‚Üí Sin restricciones
#   ‚Üí Sin costos
#
# TEST (Testing):
#   ‚Üí Ambiente controlado
#   ‚Üí L√≠mites realistas
#   ‚Üí Comportamiento predecible
#
# PROD (Producci√≥n):
#   ‚Üí M√°xima seguridad
#   ‚Üí Configuraci√≥n real
#   ‚Üí Secrets protegidos

# ========================================
# PERFIL: %dev (DESARROLLO)
# ========================================
#
# üéØ FILOSOF√çA:
# "Desarrollo r√°pido sin fricci√≥n"
#
# Optimizado para:
# - Hot reload sin restricciones
# - Testing manual √°gil
# - Debugging sin complicaciones
# - Sin costos (API, comisiones)
#
# üîß CARACTER√çSTICAS:
# ‚úì Comisi√≥n: 0.0% (gratis)
# ‚úì L√≠mite: 999,999 (ilimitado)
# ‚úì Proveedor: Mock local
# ‚úì Logs: DEBUG (muy verbosos)
# ‚úì Cache: Desactivado (cambios inmediatos)
# ‚úì Auditor√≠a: Desactivada
#
# üí° CU√ÅNDO USAR:
# - Desarrollo local de features
# - Debugging
# - Pruebas manuales r√°pidas
# - Experimentaci√≥n

# Proveedor de desarrollo
# Mock local que no requiere red ni API keys
%dev.tasacorp.provider.name=MockProvider
%dev.tasacorp.provider.url=http://localhost:8080/mock

# L√≠mite ilimitado para desarrollo
# 999,999 es pr√°cticamente sin restricciones
# Permite probar cualquier escenario sin preocuparse por l√≠mites
%dev.tasacorp.transaction.limit=999999

# Sin comisi√≥n en desarrollo
# Facilita c√°lculos mentales y debugging
# Ejemplo: 1000 PEN √ó 3.75 = 3750 USD (sin comisi√≥n)
%dev.tasacorp.commission.rate=0.0

# API key de desarrollo
# No es secreta porque es ambiente local
# En DEV no necesitamos seguridad estricta
%dev.tasacorp.provider.apikey=DEV_NO_API_KEY_NEEDED

# ========================================
# PERFIL: %test (TESTING/QA)
# ========================================
#
# üéØ FILOSOF√çA:
# "Ambiente controlado y predecible"
#
# Optimizado para:
# - Tests automatizados (JUnit)
# - Tests de integraci√≥n
# - Validaci√≥n de QA
# - CI/CD pipelines
#
# üîß CARACTER√çSTICAS:
# ‚úì Comisi√≥n: 1.5% (moderada)
# ‚úì L√≠mite: 1,000 (bajo, f√°cil de exceder)
# ‚úì Proveedor: API gratuita
# ‚úì Logs: INFO (moderados)
# ‚úì Cache: Activado (simular prod)
# ‚úì Auditor√≠a: Activada (validar funciona)
#
# üí° CU√ÅNDO USAR:
# - Tests automatizados (mvn test)
# - Validaci√≥n de QA
# - Tests de regresi√≥n
# - CI/CD (GitHub Actions, Jenkins)

# Proveedor de testing
# API gratuita para pruebas (no producci√≥n)
%test.tasacorp.provider.name=FreeCurrencyAPI
%test.tasacorp.provider.url=https://api.freecurrencyapi.com/v1

# L√≠mite bajo para testing
# Facilita probar escenarios de l√≠mite excedido
# Ejemplo: Monto 2000 > 1000 ‚Üí dentro_limite: false
%test.tasacorp.transaction.limit=1000

# Comisi√≥n moderada para testing
# 1.5% es suficiente para validar c√°lculos
# Ejemplo: 3750 √ó 1.5% = 56.25 USD
%test.tasacorp.commission.rate=1.5

# API key de testing
# Puede estar hardcoded porque es ambiente de pruebas
# No es cr√≠tico si se filtra
%test.tasacorp.provider.apikey=test_free_api_12345

# ========================================
# PERFIL: %prod (PRODUCCI√ìN)
# ========================================
#
# üéØ FILOSOF√çA:
# "M√°xima seguridad y rendimiento"
#
# Optimizado para:
# - Usuarios reales
# - Transacciones reales
# - Dinero real
# - Cumplimiento regulatorio
#
# üîß CARACTER√çSTICAS:
# ‚úì Comisi√≥n: 2.5% (completa)
# ‚úì L√≠mite: 50,000 (alto pero controlado)
# ‚úì Proveedor: API premium de pago
# ‚úì Logs: ERROR/WARN (m√≠nimos)
# ‚úì Cache: Activado (m√°ximo rendimiento)
# ‚úì Auditor√≠a: Activada (obligatorio)
# üîê API Key: Desde Vault (m√°xima seguridad)
#
# üí° CU√ÅNDO USAR:
# - Ambiente productivo
# - Usuarios finales
# - Operaciones reales

# Proveedor de producci√≥n
# API premium de pago con SLA garantizado
%prod.tasacorp.provider.name=PremiumProvider
%prod.tasacorp.provider.url=https://api.currencylayer.com/live

# L√≠mite alto para producci√≥n
# 50,000 PEN es suficiente para operaciones normales
# pero previene transacciones fraudulentas excesivas
%prod.tasacorp.transaction.limit=50000

# Comisi√≥n completa de producci√≥n
# 2.5% es la comisi√≥n real del banco
# Ejemplo: 3750 √ó 2.5% = 93.75 USD
%prod.tasacorp.commission.rate=2.5

# ‚ö†Ô∏è NOTA SOBRE API KEY EN PROD:
# NO se define aqu√≠ porque viene desde Vault (abajo)
# Ver secci√≥n "Configuraci√≥n de Vault"

# ========================================
# SECCI√ìN 6: CONFIGURACI√ìN DEL SERVIDOR
# ========================================
#
# üí° PROP√ìSITO:
# Configuraci√≥n de Quarkus y el servidor HTTP.

# Puerto HTTP
# La aplicaci√≥n escucha en http://localhost:8080
# Puede sobrescribirse con: -Dquarkus.http.port=9090
quarkus.http.port=8080

# ========================================
# SECCI√ìN 7: LOGGING
# ========================================
#
# üí° PROP√ìSITO:
# Configurar el nivel de detalle de los logs.
#
# NIVELES (de m√°s a menos verboso):
# TRACE ‚Üí DEBUG ‚Üí INFO ‚Üí WARN ‚Üí ERROR ‚Üí OFF
#
# üìä POR PERFIL:
# - DEV:  DEBUG (ver todo para debugging)
# - TEST: INFO (informaci√≥n suficiente)
# - PROD: INFO (solo lo importante)

# Nivel de log base
# Se usa en TEST y PROD
quarkus.log.level=INFO

# Nivel de log en desarrollo
# DEBUG muestra informaci√≥n muy detallada
# √ötil para ver el flujo completo de ejecuci√≥n
%dev.quarkus.log.level=DEBUG

# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë              CONFIGURACI√ìN DE VAULT (SOLO PRODUCCI√ìN)                    ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
#
# üîê PROP√ìSITO:
# Integrar HashiCorp Vault para gesti√≥n segura de secretos en producci√≥n.
#
# üí° ¬øPOR QU√â VAULT?
#
# PROBLEMA:
# Las API keys y passwords NO deben estar en properties porque:
# - Se versionan en git (quedan en historial PARA SIEMPRE)
# - Son visibles para todo el equipo
# - Dif√≠ciles de rotar (requiere redeploy)
# - Sin auditor√≠a de accesos
#
# SOLUCI√ìN - VAULT:
# - Secretos encriptados en reposo
# - Control de acceso granular
# - Rotaci√≥n sin redeploy
# - Auditor√≠a completa de qui√©n accede a qu√©
# - TTL (Time To Live) para secretos temporales
#
# üîó C√ìMO FUNCIONA:
#
# 1. Vault guarda el secreto:
#    vault kv put secret/tasacorp api-key=PREMIUM_KEY_XYZ
#
# 2. Quarkus lo lee al arrancar:
#    quarkus.vault.secret-config-kv-path=tasacorp
#
# 3. Se inyecta en la propiedad:
#    %prod.tasacorp.provider.apikey=${api-key}
#                                     ^^^^^^^^^
#                                     Viene de Vault
#
# 4. El c√≥digo lo usa normalmente:
#    config.provider().apikey() ‚Üí "PREMIUM_KEY_XYZ"
#
# üöÄ ARRANCAR VAULT:
#
# docker-compose up -d
#
# üíæ GUARDAR SECRETO:
#
# docker exec -it tasacorp-vault sh -c \
#   "vault kv put secret/tasacorp api-key=MI_SECRETO"
#
# üìä CONFIGURACI√ìN ESPEC√çFICA DE PROD:

# URL de Vault
# En este ejercicio: localhost (Vault en Docker)
# En producci√≥n real: URL interna del cluster
%prod.quarkus.vault.url=http://localhost:8200

# Token de autenticaci√≥n
# En este ejercicio: "root" (Vault en modo dev)
# En producci√≥n real: Token generado con permisos limitados
# O usar otros m√©todos: Kubernetes auth, AppRole, AWS IAM, etc.
%prod.quarkus.vault.authentication.client-token=root

# Path donde est√°n los secretos
# Vault almacena secretos en paths jer√°rquicos
# Este path (tasacorp) contiene todos los secretos de la app
%prod.quarkus.vault.secret-config-kv-path=tasacorp

# Versi√≥n del KV engine
# Vault tiene dos versiones del motor Key-Value:
# - v1: Simple key-value (deprecated)
# - v2: Con versionado, rollback, metadatos (recomendado)
%prod.quarkus.vault.kv-secret-engine-version=2

# ========================================
# API KEY DESDE VAULT
# ========================================
#
# üîê MAGIA DE LA INTEGRACI√ìN:
#
# Esta l√≠nea hace toda la magia:
#
# %prod.tasacorp.provider.apikey=${api-key}
#                                 ^^^^^^^^^
#                                 ‚îÇ
#                                 ‚îî‚îÄ NO es un valor literal
#                                    Es una REFERENCIA a Vault
#
# FLUJO COMPLETO:
#
# 1. Quarkus arranca en modo PROD
#    java -jar app.jar
#
# 2. Lee esta propiedad:
#    %prod.tasacorp.provider.apikey=${api-key}
#
# 3. Detecta ${...} ‚Üí Es una referencia, no un valor
#
# 4. Busca en Vault:
#    GET http://localhost:8200/v1/secret/data/tasacorp
#    (usando el token configurado arriba)
#
# 5. Vault responde:
#    { "data": { "api-key": "PREMIUM_KEY_XYZ" } }
#
# 6. Reemplaza la referencia:
#    tasacorp.provider.apikey=PREMIUM_KEY_XYZ
#
# 7. Inyecta en el c√≥digo:
#    config.provider().apikey() ‚Üí "PREMIUM_KEY_XYZ"
#
# ‚úÖ RESULTADO:
# El c√≥digo usa el secreto SIN que est√© en properties
# El secreto NUNCA toca git
# El secreto se puede rotar sin recompilar
#
# üîí SEGURIDAD:
# - La API key NO est√° en este archivo
# - NO est√° en el c√≥digo fuente
# - NO est√° en git
# - Est√° SOLO en Vault (encriptado)
# - Se inyecta en memoria al arrancar
# - Se destruye al terminar la aplicaci√≥n

# API key de producci√≥n viene desde Vault
# ${api-key} es el NOMBRE de la clave en Vault
# El valor real se obtiene de: vault kv get secret/tasacorp
%prod.tasacorp.provider.apikey=${api-key}

# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë                            RESUMEN FINAL                                 ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
#
# üéØ CONCEPTOS DEMOSTRADOS:
#
# ‚úÖ EXTERNALIZACI√ìN:
#    Configuraci√≥n fuera del c√≥digo fuente
#
# ‚úÖ PERFILES:
#    Mismo c√≥digo, diferente comportamiento por ambiente
#
# ‚úÖ PRIORIDADES:
#    System Props > ENV > Properties (perfil) > Properties (base)
#
# ‚úÖ SEGURIDAD:
#    Secrets en Vault, no en properties
#
# ‚úÖ CONFIGURACI√ìN TYPE-SAFE:
#    @ConfigMapping mapea properties a objetos Java
#
# üìä TABLA COMPARATIVA:
#
# ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
# ‚îÇ Propiedad    ‚îÇ   DEV   ‚îÇ  TEST   ‚îÇ  PROD   ‚îÇ
# ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
# ‚îÇ Comisi√≥n     ‚îÇ  0.0%   ‚îÇ  1.5%   ‚îÇ  2.5%   ‚îÇ
# ‚îÇ L√≠mite       ‚îÇ 999,999 ‚îÇ  1,000  ‚îÇ 50,000  ‚îÇ
# ‚îÇ Proveedor    ‚îÇ  Mock   ‚îÇ  Free   ‚îÇ Premium ‚îÇ
# ‚îÇ API Key      ‚îÇ Hardcode‚îÇ Hardcode‚îÇ  Vault  ‚îÇ
# ‚îÇ Logs         ‚îÇ  DEBUG  ‚îÇ  INFO   ‚îÇ  INFO   ‚îÇ
# ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
#
# üöÄ C√ìMO CAMBIAR DE PERFIL:
#
# Modo DEV (autom√°tico):
#   ./mvnw quarkus:dev
#
# Modo TEST (manual):
#   ./mvnw quarkus:dev -Dquarkus.profile=test
#
# Modo PROD (autom√°tico):
#   java -jar target/quarkus-app/quarkus-run.jar
#
# Modo PROD (manual):
#   ./mvnw quarkus:dev -Dquarkus.profile=prod
#
# üîç VERIFICAR CONFIGURACI√ìN:
#
# curl http://localhost:8080/api/tasas/config | jq
#
# üìñ APRENDER M√ÅS:
#
# - README-PARTE1.md: Gu√≠a de externalizaci√≥n
# - README-PARTE2.md: Gu√≠a de perfiles y Vault
# - TEORIA-PARTE1.md: Teor√≠a profunda de configuraci√≥n
# - TEORIA-PARTE2.md: Teor√≠a profunda de perfiles y seguridad

# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë                          FIN DE CONFIGURACI√ìN                            ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù