### Variables
@orderServiceUrl = http://localhost:8080
@inventoryServiceUrl = http://localhost:8081
@paymentServiceUrl = http://localhost:8082

############################################
# INVENTORY SERVICE - Pruebas
############################################

### 1. Obtener todos los productos
GET {{inventoryServiceUrl}}/api/inventory/products
Accept: application/json

### 2. Obtener un producto específico
GET {{inventoryServiceUrl}}/api/inventory/products/LAPTOP-001
Accept: application/json

### 3. Verificar health del servicio
GET {{inventoryServiceUrl}}/health
Accept: application/json

############################################
# PAYMENT SERVICE - Pruebas
############################################

### 4. Verificar health del servicio
GET {{paymentServiceUrl}}/health
Accept: application/json

############################################
# ORDER SERVICE - Pruebas (SAGA Completa)
############################################

### 5. Verificar health del servicio
GET {{orderServiceUrl}}/health
Accept: application/json

### 6. Crear orden EXITOSA (SAGA completa)
POST {{orderServiceUrl}}/api/orders
Content-Type: application/json

{
  "userId": "user-123",
  "paymentMethod": "credit_card",
  "items": [
    {
      "productCode": "LAPTOP-001",
      "quantity": 1
    },
    {
      "productCode": "MOUSE-001",
      "quantity": 2
    }
  ]
}

### 7. Crear orden con STOCK INSUFICIENTE (SAGA con compensación)
POST {{orderServiceUrl}}/api/orders
Content-Type: application/json

{
  "userId": "user-456",
  "paymentMethod": "credit_card",
  "items": [
    {
      "productCode": "LAPTOP-001",
      "quantity": 100
    }
  ]
}

### 8. Consultar orden por ID (reemplazar con ID real)
GET {{orderServiceUrl}}/api/orders/REPLACE_WITH_ORDER_ID
Accept: application/json

### 9. Consultar órdenes de un usuario
GET {{orderServiceUrl}}/api/orders/user/user-123
Accept: application/json

### 10. Invalidar cache de producto (Redis)
DELETE {{orderServiceUrl}}/api/orders/cache/product/LAPTOP-001

### 11. Verificar OpenAPI/Swagger
GET {{orderServiceUrl}}/swagger-ui
Accept: text/html

############################################
# PRUEBAS DE RENDIMIENTO - Cache Redis
############################################

### 12. Primera consulta (Cache MISS - lenta)
GET {{orderServiceUrl}}/api/orders/user/user-123
Accept: application/json

### 13. Segunda consulta (Cache HIT - rápida)
GET {{orderServiceUrl}}/api/orders/user/user-123
Accept: application/json

############################################
# PRUEBA DE CARGA - Múltiples órdenes
############################################

### 14. Crear orden 1
POST {{orderServiceUrl}}/api/orders
Content-Type: application/json

{
  "userId": "user-load-test-1",
  "paymentMethod": "credit_card",
  "items": [
    {"productCode": "KEYBOARD-001", "quantity": 1}
  ]
}

### 15. Crear orden 2
POST {{orderServiceUrl}}/api/orders
Content-Type: application/json

{
  "userId": "user-load-test-2",
  "paymentMethod": "debit_card",
  "items": [
    {"productCode": "MONITOR-001", "quantity": 1},
    {"productCode": "HEADSET-001", "quantity": 1}
  ]
}

### 16. Crear orden 3
POST {{orderServiceUrl}}/api/orders
Content-Type: application/json

{
  "userId": "user-load-test-3",
  "paymentMethod": "paypal",
  "items": [
    {"productCode": "WEBCAM-001", "quantity": 2},
    {"productCode": "TABLET-001", "quantity": 1}
  ]
}
