# ============================================================================
# SCORING SERVICE - CONFIGURACIÓN
# ============================================================================
# Microservicio para cálculo de score crediticio
# Puerto: 8082
# Tecnologías: Quarkus Reactive, Mutiny, REST Client, Redis Cache
# ============================================================================

# ----------------------------------------------------------------------------
# APLICACIÓN
# ----------------------------------------------------------------------------
quarkus.application.name=scoring-service
quarkus.http.port=8082
quarkus.http.host=0.0.0.0

# CORS para desarrollo
quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with

# ----------------------------------------------------------------------------
# POSTGRESQL - BASE DE DATOS REACTIVA
# ----------------------------------------------------------------------------
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=creditcore
quarkus.datasource.password=creditcore123
quarkus.datasource.reactive.url=postgresql://localhost:5432/scoring_db

# Configuración del pool reactivo
quarkus.datasource.reactive.max-size=20
quarkus.datasource.reactive.idle-timeout=PT10M

# Hibernate ORM
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.sql-load-script=import.sql

# ----------------------------------------------------------------------------
# REDIS CACHE
# ----------------------------------------------------------------------------
quarkus.redis.hosts=redis://localhost:6379
quarkus.redis.password=
quarkus.redis.client-type=standalone

# Configuración de cache
quarkus.cache.enabled=true
quarkus.cache.type=redis

# TTL del cache (30 minutos para scores calculados)
quarkus.redis.timeout=30m

# ----------------------------------------------------------------------------
# REST CLIENT - INTEGRACIÓN CON CUSTOMER-SERVICE
# ----------------------------------------------------------------------------
# URL del customer-service
quarkus.rest-client."pe.edu.creditcore.scoring.integration.CustomerServiceClient".url=http://localhost:8081
quarkus.rest-client."pe.edu.creditcore.scoring.integration.CustomerServiceClient".scope=jakarta.inject.Singleton

# Timeouts reactivos
quarkus.rest-client."pe.edu.creditcore.scoring.integration.CustomerServiceClient".connect-timeout=5000
quarkus.rest-client."pe.edu.creditcore.scoring.integration.CustomerServiceClient".read-timeout=10000

# Propagación del token JWT
quarkus.rest-client."pe.edu.creditcore.scoring.integration.CustomerServiceClient".providers=io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter

# ----------------------------------------------------------------------------
# SEGURIDAD - OIDC CON KEYCLOAK
# ----------------------------------------------------------------------------
quarkus.oidc.auth-server-url=http://localhost:8080/realms/creditcore
quarkus.oidc.client-id=scoring-service
quarkus.oidc.credentials.secret=fgwIG77MYz0hLQyImFYyPskmL0nM3Dgi
quarkus.oidc.tls.verification=none

# Roles y permisos
quarkus.security.users.embedded.enabled=false
quarkus.http.auth.permission.authenticated.paths=/*
quarkus.http.auth.permission.authenticated.policy=authenticated

# Permitir acceso sin autenticación a endpoints públicos
quarkus.http.auth.permission.public.paths=/q/*
quarkus.http.auth.permission.public.policy=permit

# ----------------------------------------------------------------------------
# FAULT TOLERANCE
# ----------------------------------------------------------------------------
# Circuit Breaker - Si customer-service falla, abrimos el circuito
# Retry - 3 intentos con backoff exponencial
# Timeout - 15 segundos máximo por operación de scoring

# Global timeout para operaciones de scoring
mp.faulttolerance.timeout=15000

# ----------------------------------------------------------------------------
# OBSERVABILIDAD
# ----------------------------------------------------------------------------
# Health Checks
quarkus.smallrye-health.root-path=/q/health

# Métricas
quarkus.micrometer.enabled=true
quarkus.micrometer.export.prometheus.enabled=true
quarkus.micrometer.export.prometheus.path=/q/metrics

# OpenAPI / Swagger
quarkus.smallrye-openapi.path=/q/openapi
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.path=/q/swagger-ui
quarkus.swagger-ui.theme=flattop

# Info de la API
mp.openapi.extensions.smallrye.info.title=Scoring Service API
mp.openapi.extensions.smallrye.info.version=1.0.0
mp.openapi.extensions.smallrye.info.description=Microservicio de cálculo de score crediticio para CreditCore
mp.openapi.extensions.smallrye.info.contact.name=CreditCore Team
mp.openapi.extensions.smallrye.info.license.name=Apache 2.0

# ----------------------------------------------------------------------------
# LOGGING
# ----------------------------------------------------------------------------
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=INFO

# Niveles específicos
quarkus.log.category."pe.edu.creditcore".level=DEBUG
quarkus.log.category."org.hibernate".level=INFO
quarkus.log.category."io.smallrye.mutiny".level=DEBUG

# ----------------------------------------------------------------------------
# DESARROLLO
# ----------------------------------------------------------------------------
%dev.quarkus.http.port=8082
%dev.quarkus.hibernate-orm.log.sql=true
%dev.quarkus.log.console.level=DEBUG

# Live Reload
%dev.quarkus.live-reload.instrumentation=true

# ----------------------------------------------------------------------------
# PRODUCCIÓN
# ----------------------------------------------------------------------------
%prod.quarkus.hibernate-orm.log.sql=false
%prod.quarkus.log.console.level=INFO
%prod.quarkus.hibernate-orm.database.generation=validate

# ----------------------------------------------------------------------------
# CONFIGURACIÓN ESPECÍFICA DEL SCORING
# ----------------------------------------------------------------------------
# Umbrales de score (0-1000)
scoring.threshold.excellent=800
scoring.threshold.good=650
scoring.threshold.fair=500
scoring.threshold.poor=350

# Pesos de factores (deben sumar 1.0)
scoring.weight.income=0.30
scoring.weight.industry=0.25
scoring.weight.debt-ratio=0.25
scoring.weight.company-age=0.20

# Límites de crédito por tipo de empresa
scoring.limit.persona-natural=50000
scoring.limit.pyme=500000
scoring.limit.corporativo=5000000

# Ratio máximo deuda/ingreso permitido
scoring.max-debt-ratio=0.40
