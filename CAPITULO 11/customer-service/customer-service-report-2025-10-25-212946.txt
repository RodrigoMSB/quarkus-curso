================================================================================
REPORTE DE PRUEBAS FUNCIONALES
Customer Service - Gestión de Clientes Empresariales
================================================================================

Fecha de ejecución: 2025-10-25 21:29:46
Servicio bajo prueba: http://localhost:8081

Generado por: test-customer-service.sh
Sistema operativo: Darwin

Este reporte contiene los resultados de las pruebas funcionales del
Customer Service, incluyendo:
  - Health checks y endpoints base
  - CRUD de clientes con validaciones
  - Redis Cache (latencias y mejora de rendimiento)
  - Búsquedas por RUC e industria
  - Validación de datos (Bean Validation)
  - OpenAPI y métricas

Tecnologías probadas:
  ✓ Panache Active Record (Hibernate ORM)
  ✓ Google Tink (cifrado de RUC)
  ✓ Redis Cache (rendimiento)
  ✓ Bean Validation (validaciones)
  ✓ Fault Tolerance (Circuit Breaker, Retry)

================================================================================


============================================================================
🚀 PRUEBAS FUNCIONALES - CUSTOMER SERVICE
============================================================================


PRUEBAS INCLUIDAS:
   1. Health Checks y conectividad
   2. Listar clientes activos (datos pre-cargados)
   3. Crear nuevo cliente con validaciones
   4. Obtener cliente por ID
   5. Redis Cache - Medición de rendimiento
      - Cache MISS (primera consulta desde PostgreSQL)
      - Cache HIT (consultas subsecuentes desde Redis)
      - Comparación de latencias
   6. Actualizar cliente existente
   7. Buscar por RUC (campo cifrado)
   8. Buscar por industria
   9. Validaciones (Bean Validation)
  10. OpenAPI y métricas

ℹ Verificando conectividad con http://localhost:8081...
✓ Servicio disponible y respondiendo
Servicio verificado: OK
ℹ Obteniendo JWT token de Keycloak...
✓ JWT token obtenido exitosamente
ℹ Token válido por 5 minutos (300 segundos)
JWT Token: Obtenido correctamente
Token length: 1499 caracteres

============================================================================
🔥 PRUEBA 1: HEALTH CHECKS Y CONECTIVIDAD
============================================================================


>>> 1.1 - Health Check básico

ℹ Verificando que el servicio esté operativo...
Response: Customer Service is UP
HTTP Code: 200
✓ Servicio operativo: Customer Service is UP
✓ TEST #1: Health check básico

>>> 1.2 - Health Check detallado (Quarkus)

ℹ Verificando health checks de Quarkus...

Health Check completo:
{
  "status": "UP",
  "checks": [
    {
      "name": "Database connections health check",
      "status": "UP",
      "data": {
        "<default>": "UP"
      }
    },
    {
      "name": "Redis connection health check",
      "status": "UP",
      "data": {
        "default": "PONG"
      }
    }
  ]
}
✓ TEST #2: Health check Quarkus



============================================================================
👤 PRUEBA 2: LISTAR CLIENTES ACTIVOS
============================================================================


>>> 2.1 - Obtener todos los clientes activos

ℹ Consultando clientes pre-cargados en la base de datos...

Clientes activos:
[
  {
    "id": 2,
    "rucMasked": "XXXXXXXXX21",
    "legalName": "Comercial del Sur S.A.",
    "tradeName": "ComSur",
    "industry": "RETAIL",
    "foundedDate": "2015-07-20",
    "annualRevenue": 8000000.00,
    "contactEmail": "ventas@comsur.pe",
    "contactPhone": "+51912345678",
    "address": "Jr. Comercio 456",
    "city": "Arequipa",
    "status": "ACTIVE",
    "creditScore": 650,
    "riskCategory": "A",
    "sunatValidated": true,
    "createdAt": "2025-10-25T21:19:31.48829",
    "updatedAt": "2025-10-25T21:19:31.48829",
    "createdBy": "system",
    "isHighRisk": false,
    "isPremium": false
  },
  {
    "id": 3,
    "rucMasked": "XXXXXXXXX77",
    "legalName": "Industrias Perú S.R.L.",
    "tradeName": "IndPeru",
    "industry": "MANUFACTURING",
    "foundedDate": "2018-11-10",
ℹ Total de clientes activos: 5
Total: 5 clientes
✓ Datos pre-cargados disponibles
✓ TEST #3: Listar clientes activos



============================================================================
🔐 PRUEBA 3: CREAR NUEVO CLIENTE
============================================================================


>>> 3.1 - Crear cliente con todos los campos válidos

ℹ Enviando solicitud para crear cliente...
ℹ RUC será cifrado con Google Tink antes de almacenar
ℹ RUC único generado: 20456789089
Request:
{
  "ruc": "20456789089",
  "legalName": "Tech Innovations Peru S.A.C.",
  "tradeName": "TechPeru",
  "industry": "TECHNOLOGY",
  "foundedDate": "2020-01-15",
  "annualRevenue": 5000000.00,
  "contactEmail": "contacto@techperu.pe",
  "contactPhone": "+51987654999",
  "address": "Av. Tecnología 500",
  "city": "Lima"
}

Response:
{
  "id": 7,
  "rucMasked": "XXXXXXXXX89",
  "legalName": "Tech Innovations Peru S.A.C.",
  "tradeName": "TechPeru",
  "industry": "TECHNOLOGY",
  "foundedDate": "2020-01-15",
  "annualRevenue": 5000000.00,
  "contactEmail": "contacto@techperu.pe",
  "contactPhone": "+51987654999",
  "address": "Av. Tecnología 500",
  "city": "Lima",
  "status": "ACTIVE",
  "creditScore": null,
  "riskCategory": null,
  "sunatValidated": false,
  "createdAt": "2025-10-25T21:29:50.441867",
  "updatedAt": "2025-10-25T21:29:50.441872",
  "createdBy": "admin-user",
  "isHighRisk": false,
  "isPremium": false
}
✓ Cliente creado exitosamente - ID: 7
ℹ RUC almacenado cifrado: XXXXXXXXX89
Cliente ID: 7
✓ TEST #4: Crear cliente nuevo



============================================================================
🔍 PRUEBA 4: OBTENER CLIENTE POR ID
============================================================================


>>> 4.1 - Consultar cliente recién creado

ℹ Obteniendo cliente ID: 7

Cliente consultado:
{
  "id": 7,
  "rucMasked": "XXXXXXXXX89",
  "legalName": "Tech Innovations Peru S.A.C.",
  "tradeName": "TechPeru",
  "industry": "TECHNOLOGY",
  "foundedDate": "2020-01-15",
  "annualRevenue": 5000000.00,
  "contactEmail": "contacto@techperu.pe",
  "contactPhone": "+51987654999",
  "address": "Av. Tecnología 500",
  "city": "Lima",
  "status": "ACTIVE",
  "creditScore": null,
  "riskCategory": null,
  "sunatValidated": false,
  "createdAt": "2025-10-25T21:29:50.441867",
  "updatedAt": "2025-10-25T21:29:50.441872",
  "createdBy": "admin-user",
  "isHighRisk": false,
  "isPremium": false
}
✓ TEST #5: Obtener cliente por ID

============================================================================
⚡ PRUEBA 5: REDIS CACHE - RENDIMIENTO
============================================================================


>>> 5.1 - Primera consulta (Cache MISS)

ℹ Consultando cliente 7 por primera vez...
ℹ Esta consulta irá a PostgreSQL (más lenta)...
✓ Latencia primera consulta: 64ms
Latencia: 64ms (Cache MISS - desde PostgreSQL)
✓ TEST #6: Primera consulta (Cache MISS)

>>> 5.2 - Verificar Redis (si docker disponible)

ℹ Verificando Redis con docker exec...
ℹ Clave no verificable directamente (puede estar cifrada o con prefix)
Redis Cache: Clave no verificable con docker exec

>>> 5.3 - Segunda consulta (Cache HIT esperado)

ℹ Consultando cliente 7 nuevamente...
ℹ Esta consulta debería venir desde Redis (más rápida)...
✓ Latencia segunda consulta: 70ms
Latencia: 70ms (Cache HIT - desde Redis)
⚠ Segunda consulta 6ms más lenta (puede ser ruido de red)
Comparación: 64ms → 70ms (sin mejora)
✓ TEST #7: Segunda consulta (Cache HIT)

>>> 5.4 - Tercera consulta (validar cache persistente)

ℹ Consultando una vez más para confirmar cache...
ℹ Latencia tercera consulta: 60ms
Latencia tercera consulta: 60ms
ℹ 
ℹ 📊 Comparación de las 3 consultas:
ℹ   1ª consulta (Cache MISS):        64ms  ← Desde PostgreSQL
ℹ   2ª consulta (Cache HIT):         70ms  ← Desde Redis
ℹ   3ª consulta (Cache persistente): 60ms  ← Desde Redis

RESUMEN CACHE:
  1ª: 64ms (MISS - PostgreSQL)
  2ª: 70ms (HIT - Redis)
  3ª: 60ms (HIT - Redis)
ℹ Cache presente pero mejora no significativa (sistema muy rápido)
CONCLUSIÓN CACHE: Presente pero sin mejora medible
✓ TEST #8: Tercera consulta (Cache persistente)



============================================================================
👤 PRUEBA 6: ACTUALIZAR CLIENTE
============================================================================


>>> 6.1 - Actualizar datos del cliente 7

ℹ Actualizando cliente...
ℹ Cambios: tradeName, annualRevenue, contactEmail, contactPhone, address
Request:
{
      "ruc": "20456789089",
      "legalName": "Tech Innovations Peru S.A.C.",
      "tradeName": "TechPeru Pro",
      "industry": "TECHNOLOGY",
      "foundedDate": "2020-01-15",
      "annualRevenue": 7500000.00,
      "contactEmail": "nuevo@techperu.pe",
      "contactPhone": "+51987654888",
      "address": "Av. Tecnología 600",
      "city": "Lima"
    }

Response:
{
  "id": 7,
  "rucMasked": "XXXXXXXXX89",
  "legalName": "Tech Innovations Peru S.A.C.",
  "tradeName": "TechPeru Pro",
  "industry": "TECHNOLOGY",
  "foundedDate": "2020-01-15",
  "annualRevenue": 7500000.00,
  "contactEmail": "nuevo@techperu.pe",
  "contactPhone": "+51987654888",
  "address": "Av. Tecnología 600",
  "city": "Lima",
  "status": "ACTIVE",
  "creditScore": null,
  "riskCategory": null,
  "sunatValidated": false,
  "createdAt": "2025-10-25T21:29:50.441867",
  "updatedAt": "2025-10-25T21:29:50.441872",
  "createdBy": "admin-user",
  "isHighRisk": false,
  "isPremium": false
}
✓ Cliente actualizado correctamente
ℹ ✓ Cache invalidado automáticamente (@CacheInvalidate)
✓ TEST #9: Actualizar cliente

============================================================================
🔍 PRUEBA 7: BUSCAR CLIENTE POR RUC
============================================================================


>>> 7.1 - Buscar por RUC (campo cifrado)

ℹ Buscando cliente con RUC: 20456789089
ℹ El servicio cifrará el RUC antes de buscar en BD...

Cliente encontrado:
{
  "id": 7,
  "rucMasked": "XXXXXXXXX89",
  "legalName": "Tech Innovations Peru S.A.C.",
  "tradeName": "TechPeru Pro",
  "industry": "TECHNOLOGY",
  "foundedDate": "2020-01-15",
  "annualRevenue": 7500000.00,
  "contactEmail": "nuevo@techperu.pe",
  "contactPhone": "+51987654888",
  "address": "Av. Tecnología 600",
  "city": "Lima",
  "status": "ACTIVE",
  "creditScore": null,
  "riskCategory": null,
  "sunatValidated": false,
  "createdAt": "2025-10-25T21:29:50.441867",
  "updatedAt": "2025-10-25T21:29:53.635235",
  "createdBy": "admin-user",
  "isHighRisk": false,
✓ Cliente encontrado por RUC
ℹ RUC enmascarado en respuesta: XXXXXXXXX89
✓ TEST #10: Buscar cliente por RUC



============================================================================
🔍 PRUEBA 8: BUSCAR POR INDUSTRIA
============================================================================


>>> 8.1 - Listar clientes de industria TECHNOLOGY

ℹ Filtrando clientes por sector industrial...

Clientes TECHNOLOGY:
[
  {
    "id": 6,
    "rucMasked": "XXXXXXXXX12",
    "legalName": "Tech Innovations Peru S.A.C.",
    "tradeName": "TechPeru Pro",
    "industry": "TECHNOLOGY",
    "foundedDate": "2020-01-15",
    "annualRevenue": 7500000.00,
    "contactEmail": "nuevo@techperu.pe",
    "contactPhone": "+51987654888",
    "address": "Av. Tecnología 600",
    "city": "Lima",
    "status": "ACTIVE",
    "creditScore": null,
    "riskCategory": null,
    "sunatValidated": false,
    "createdAt": "2025-10-25T21:21:52.956127",
    "updatedAt": "2025-10-25T21:21:53.608441",
    "createdBy": "admin-user",
    "isHighRisk": false,
    "isPremium": false
  },
  {
    "id": 1,
    "rucMasked": "XXXXXXXXX89",
    "legalName": "Tech Innovations Peru S.A.C.",
    "tradeName": "TechPeru Pro",
    "industry": "TECHNOLOGY",
    "foundedDate": "2020-01-15",
ℹ Total clientes en TECHNOLOGY: 3
Total: 3 clientes
✓ TEST #11: Listar por industria



============================================================================
❌ PRUEBA 9: VALIDACIONES - BEAN VALIDATION
============================================================================


>>> 9.1 - RUC inválido (formato incorrecto)

ℹ Intentando crear cliente con RUC de solo 3 dígitos...

Response (error esperado):
{"title":"Constraint Violation","status":400,"violations":[{"field":"createCustomer.request.ruc","message":"El RUC debe tener exactamente 11 dígitos"}]}
✓ Validación funcionó correctamente (400 Bad Request)
ℹ El servicio rechazó RUC con formato incorrecto
✓ TEST #12: Validar RUC formato incorrecto

>>> 9.2 - Email inválido

ℹ Intentando crear cliente con email sin formato correcto...

Response (error esperado):
{"title":"Constraint Violation","status":400,"violations":[{"field":"createCustomer.request.contactEmail","message":"El email no tiene formato válido"}]}
✓ Validación de email funcionó correctamente
✓ TEST #13: Validar email formato incorrecto



============================================================================
📊 PRUEBA 10: OPENAPI Y MÉTRICAS
============================================================================


>>> 10.1 - OpenAPI Specification

ℹ Consultando especificación OpenAPI...

OpenAPI (primeras líneas):
---
openapi: 3.0.3
info:
  title: Customer Service API
  description: Gestión de clientes empresariales con cifrado y caché
  version: 1.0.0
tags:
- name: Customers
  description: Gestión de clientes empresariales
paths:
  /api/customers:
    get:
      tags:
      - Customers
      summary: Listar clientes activos
✓ TEST #14: OpenAPI disponible

>>> 10.2 - Métricas (Micrometer)

ℹ Consultando métricas de la aplicación...

Métricas (muestra):
		- POST (consumes: application/json) (produces:application/json)
		- GET (consumes: application/json) (produces:application/json)
		- GET (consumes: application/json) (produces:application/json)
		- GET (consumes: application/json) (produces:application/json)
		- GET (consumes: application/json) (produces:text/plain;charset=UTF-8)
✗ TEST #15: Métricas disponibles (esperado: 200, obtenido: 404)
ℹ 
ℹ URLs útiles:
ℹ   - Swagger UI: http://localhost:8081/q/swagger-ui
ℹ   - Health:     http://localhost:8081/q/health
ℹ   - Metrics:    http://localhost:8081/q/metrics

URLs del servicio:
  - Swagger UI: http://localhost:8081/q/swagger-ui
  - Health:     http://localhost:8081/q/health
  - Metrics:    http://localhost:8081/q/metrics

============================================================================
📊 RESUMEN DE PRUEBAS
============================================================================


╔════════════════════════════════════════════════════════════════╗
║                    RESULTADOS FINALES                          ║
╠════════════════════════════════════════════════════════════════╣
║ Total de pruebas:    15                                        ║
║ Pruebas exitosas:    14                                        ║
║ Pruebas fallidas:    1                                         ║
╚════════════════════════════════════════════════════════════════╝

✗ Algunas pruebas fallaron. Revisa los logs arriba.

CONCLUSIÓN: Sistema con fallas. Revisar pruebas fallidas.

================================================================================
FIN DEL REPORTE
================================================================================

Archivo generado: customer-service-report-2025-10-25-212946.txt
Fecha: 2025-10-25 21:29:57

Para más información, consulta:
- README.md: Guía de usuario
- TEORIA.md: Conceptos técnicos sobre Panache, Tink, Cache, etc.
- instructor.md: Guía del profesor

Capítulo 11: Customer Service con Quarkus
Tecnologías implementadas:
  - Panache Active Record (simplificación de JPA)
  - Google Tink (cifrado de datos sensibles)
  - Redis Cache (optimización de rendimiento)
  - Fault Tolerance (Circuit Breaker, Retry, Timeout)
  - Bean Validation (validaciones declarativas)
  - RESTEasy Reactive (endpoints REST)

================================================================================
✓ Reporte guardado en: customer-service-report-2025-10-25-212946.txt
